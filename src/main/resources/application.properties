server.port=8081

##h2
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2
#spring.datasource.url=jdbc:h2:mem:coder-bank-conta
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.hibernate.ddl-auto=update

# PostgreSQL CONFIG
spring.datasource.url=jdbc:postgresql://localhost:5432/coder_bank_conta
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=update
#O dialeto permite que o Hibernate gere SQL otimizado para um banco de dados relacional
# específico. Fornece informações sobre como converter consultas do hibernate HQL em SQL nativas
spring.jpa.database-platform =org.hibernate.dialect.PostgreSQL95Dialect

#evita que aparecam algumas mensagens de avisos no log. O spring tenta recuperar
#alguns metadados do banco de dados, não consegue encontrar e gera um aviso.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


#kafka
spring.kafka.consumer.bootstrap-servers=127.0.0.1:29092
# Informa de onde o consumer deve começar a ler a mensagem da particao
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#especifica uma lista delimitada por vírgulas de padrões de pacotes
# permitidos para desserialização. '*'significa desserializar todos
# os pacotes.
spring.kafka.consumer.properties.spring.json.trusted.packages=*